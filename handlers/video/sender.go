package video

import (
	"fmt"
	"net/http"
	"os"
	"path"
	"strconv"
	"strings"
	"video/config"
	"video/database"
	"video/streamer"

	"log/slog"
)

// GET /video?file_name=...
func Sender(streamer streamer.Streamer, database *database.DB) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		videoName := r.URL.Query().Get("file_name")
		if videoName == "" {
			slog.Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: file_name",
				"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
				"–º–µ—Ç–æ–¥", r.Method,
				"–ø—É—Ç—å", r.URL.Path,
			)
			http.Error(w, "Missing required parameter: file_name", http.StatusBadRequest)
			return
		}

		video, err := database.GetVideoByFileName(videoName)
		if err != nil {
			slog.Error("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
				"–∏–º—è_–≤–∏–¥–µ–æ", videoName,
				"–æ—à–∏–±–∫–∞", err,
				"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
			)
			http.Error(w, "video not found", http.StatusNotFound) // ‚úÖ 404 –≤–º–µ—Å—Ç–æ 400
			return
		}

		rangeHeader := r.Header.Get("Range")
		var start, end int64
		fmt.Println(rangeHeader)
		if rangeHeader == "" {
			// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –ø–µ—Ä–≤—ã–µ 1 –ú–ë
			start = 0
			end = 1024*1024 - 1
		} else {
			rangeParts := strings.TrimPrefix(rangeHeader, "bytes=")
			parts := strings.Split(rangeParts, "-")
			if len(parts) != 2 {
				slog.Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ Range",
					"–¥–∏–∞–ø–∞–∑–æ–Ω", rangeHeader,
					"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
				)
				http.Error(w, "Invalid range format", http.StatusBadRequest)
				return
			}

			// –ü–∞—Ä—Å–∏–º start
			if parts[0] == "" {
				slog.Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–π—Ç –≤ Range",
					"–¥–∏–∞–ø–∞–∑–æ–Ω", rangeHeader,
					"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
				)
				http.Error(w, "Invalid range: missing start", http.StatusBadRequest)
				return
			}
			start, err = strconv.ParseInt(parts[0], 10, 64)
			if err != nil || start < 0 {
				slog.Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–π—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Range",
					"–¥–∏–∞–ø–∞–∑–æ–Ω", rangeHeader,
					"–æ—à–∏–±–∫–∞", err,
					"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
				)
				http.Error(w, "Invalid start byte", http.StatusBadRequest)
				return
			}

			end = start + 5*1024*1024

		}
		fileInfo, err := os.Stat(path.Join(config.UploadDir, video.FileName))
		if err != nil {
			slog.Error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª",
				"–¥–∏–∞–ø–∞–∑–æ–Ω", rangeHeader,
				"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
			)
			http.Error(w, "Missing video", http.StatusNotFound)
			return
		}
		videoSize := fileInfo.Size()
		// üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: start –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —Ñ–∞–π–ª–∞ ‚Üí 416
		if start >= videoSize {
			w.Header().Set("Content-Range", fmt.Sprintf("bytes */%d", videoSize))
			slog.Warn("–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–Ω–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ",
				"–∏–º—è_–≤–∏–¥–µ–æ", videoName,
				"start", start,
				"size", videoSize,
				"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
			)
			http.Error(w, "Requested range not satisfiable", http.StatusRequestedRangeNotSatisfiable)
			return
		}

		// üîí –û–±—Ä–µ–∑–∞–µ–º end –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞
		if end >= videoSize {
			end = videoSize - 1
		}

		// –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ–º
		videoData, err := streamer.Seek(video, start, end)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ",
				"–∏–º—è_–≤–∏–¥–µ–æ", videoName,
				"–Ω–∞—á–∞–ª–æ", start,
				"–∫–æ–Ω–µ—Ü", end,
				"–æ—à–∏–±–∫–∞", err,
			)
			http.Error(w, fmt.Sprintf("Error retrieving video: %v", err), http.StatusInternalServerError)
			return
		}

		// ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
		w.Header().Set("Content-Range", fmt.Sprintf("bytes %d-%d/%d", start, end, videoSize))
		fmt.Println(start, end)
		w.Header().Set("Accept-Ranges", "bytes")
		w.Header().Set("Content-Length", strconv.Itoa(len(videoData)))
		w.Header().Set("Content-Type", "video/mp4")
		w.WriteHeader(http.StatusPartialContent)

		_, err = w.Write(videoData)
		if err != nil {
			slog.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ –≤–∏–¥–µ–æ –∫–ª–∏–µ–Ω—Ç—É",
				"–∏–º—è_–≤–∏–¥–µ–æ", videoName,
				"–Ω–∞—á–∞–ª–æ", start,
				"–∫–æ–Ω–µ—Ü", end,
				"—Ä–∞–∑–º–µ—Ä", len(videoData),
				"–æ—à–∏–±–∫–∞", err,
				"—É–¥–∞–ª—ë–Ω–Ω—ã–π_–∞–¥—Ä–µ—Å", r.RemoteAddr,
			)
			// –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å ‚Äî –æ—Ç–≤–µ—Ç —É–∂–µ –Ω–∞—á–∞—Ç
		}
	}
}
